"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Request_1 = require("../Request");
const Response_1 = require("../Response");
const User_1 = require("../User");
const Utils_1 = require("../Utils");
function messageListener(query) {
    return __awaiter(this, void 0, void 0, function* () {
        const userData = yield this.storageInstance.Get(query.from.id);
        const user = new User_1.default(query.from.id, userData.path, userData.history);
        for (const route of this.router) {
            const [isSame, body] = (0, Utils_1.compareRouteAndPath)(route.path, user.path);
            if (!isSame)
                continue;
            const callbackQueue = [
                ...this.router.routerMiddleware,
                ...route.middleware,
            ];
            if (callbackQueue.length === 0)
                continue;
            const req = new Request_1.default({
                user,
                body,
                message: query,
            });
            const res = new Response_1.default(user, this.botInstance, this.storageInstance, query);
            const prevPath = [...user.path];
            function next() {
                return __awaiter(this, void 0, void 0, function* () {
                    const _cb = callbackQueue.shift();
                    if (!_cb)
                        return;
                    yield _cb(req, res, next);
                });
            }
            const cb = callbackQueue.shift();
            yield cb(req, res, next);
            if (!(0, Utils_1.comparePath)(prevPath, [...user.path]))
                break;
        }
    });
}
exports.default = messageListener;
